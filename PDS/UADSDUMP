UADSDUMP TITLE 'UADSDUMP -- UADS UNLOAD PROGRAM'                        00001**1
**********************************************************************  00002**1
*                                                                    *  00003**1
*  MODULE NAME -                                                     *  00004**1
*                                                                    *  00005**1
*     UADSDUMP -- UADS UNLOAD PROGRAM                                *  00006**1
*                                                                    *  00007**1
*  FUNCTION -                                                        *  00008**1
*                                                                    *  00009**1
*     THIS PROGRAM READS THE SYS1.UADS DATASET AND OUTPUTS ACCOUNT   *  00010**1
*     CONTROL CARDS TO BE USED TO REBUILD SYS1.UADS.                 *  00011**1
*                                                                    *  00012**1
*  ATTRIBUTES -                                                      *  00013**1
*                                                                    *  00014**1
*     REENTRANT.                                                     *  00015**1
*                                                                    *  00016**1
*  ENTRY CONDITIONS -                                                *  00017**1
*                                                                    *  00018**1
*     R15 - ENTRY ADDRESS (UADSDUMP)                                 *  00019**1
*     R14 - RETURN ADDRESS                                           *  00020**1
*     R13 - ADDRESS OF A STANDARD SAVE AREA                          *  00021**1
*                                                                    *  00022**1
*  EXIT CONDITIONS -                                                 *  00023**1
*                                                                    *  00024**1
*     NONE.                                                          *  00025**1
*                                                                    *  00026**1
*  REGISTER USAGE -                                                  *  00027**1
*                                                                    *  00028**1
*     R15 - WORK                                                     *  00029*29
*     R14 - WORK                                                     *  00030*29
*     R13 - ADDRESS OF SAVE (WORK) AREA                              *  00031**1
*     R12 - BASE ADDRESS (UADSDUMP)                                  *  00032**1
*     R11 - DCB ADDRESS                                              *  00033**1
*     R10 - DIRECTORY LIST ENTRY                                     *  00034**1
*     R9  - DIRECTORY BLOCK ENTRY                                    *  00035**1
*     R8  - ADDRESS OF UADS ENTRY                                    *  00036*37
*     R7  - ADDRESS OF THE UADS PASSWORD OFFSET BLOCK (DPOB)         *  00037*24
*     R6  - INTERNAL SUBROUTINE LINKAGE                              *  00038**9
*     R5  - ADDRESS OF THE UADS ACCOUNT OFFSET BLOCK (DNOB)          *  00039*24
*     R4  - ADDRESS OF THE UADS PROCEDURE OFFSET BLOCK (DROB)        *  00040*24
*     R3  - WORK                                                     *  00041*24
*     R2  - WORK                                                     *  00042*24
*     R1  - WORK                                                     *  00043**9
*     R0  - WORK                                                     *  00044**9
*                                                                    *  00045**1
*  RESTRICTIONS -                                                    *  00046*36
*                                                                    *  00047*36
*     PRESENTLY, THIS PROGRAM PROCESSES SINGLE-BLOCK UADS ENTRIES    *  00048*36
*     ONLY.  ANY MULTIPLE-BLOCK ENTRIES ARE SKIPPED AND A WARNING    *  00049*36
*     MESSAGE IS PRINTED (THE FIRST BLOCK IS, HOWEVER, PROCESSED).   *  00050*36
*     ALSO, THIS PROGRAM ASSUMES THAT THE UADS IS IN THE EXTENDED    *  00051*36
*     (TSO/E) FORMAT.                                                *  00052*36
*                                                                    *  00053*36
*  OPERATION -                                                       *  00054**1
*     1.  PROGRAM INITIALIZATION IS PERFORMED AND THE MESSAGE DATASET*  00055*36
*         IS OPENED.  FAILURE TO OPEN THE MESSAGE DATASET FORCES AN  *  00056*36
*         ABEND.                                                     *  00057*36
*     2.  THE UADS DIRECTORY IS OPENED AND AN IN-STORAGE MEMBER LIST *  00058*36
*         IS BUILT FROM THE DIRECTORY.                               *  00059*36
*     3.  THE UADS IS OPENED (AS A PDS) AND A BUFFER IS OBTAINED     *  00060*37
*         BASED ON THE BLOCKSIZE.  THE ACCOUNT CARD FILE IS OPENED.  *  00061*37
*     4.  EACH UADS MEMBER IN THE MEMBER LIST IS READ FROM THE UADS  *  00062*36
*         DATASET.  AS THE MEMBERS ARE READ, ACCOUNT CONTROL CARDS   *  00063*36
*         ARE WRITTEN TO THE ACCOUNT DATASET.                        *  00064*36
*     5.  ONCE THE LAST MEMBER HAS BEEN PROCESSED, THE UADS AND      *  00065*36
*         ACCOUNT DATASETS ARE CLOSED.                               *  00066*36
*                                                                    *  00067*36
*  SAMPLE JCL -                                                      *  00067*36
*                                                                    *  00067*36
*    //JOBNAME  JOB (ACCOUNTING DATA),'PROGRAMMER NAME',             *
*    //         CLASS=X,MSGCLASS=X,NOTIFY=XXXXXX                     *
*    //UADSDUMP EXEC PGM=UADSDUMP                                    *
*    //SYSPRINT  DD  SYSOUT=*                                        *
*    //SYSUDUMP  DD  SYSOUT=*                                        *
*    //PDS       DD  DSN=SYS1.UADS,DISP=SHR                          *
*    //*ACCOUNT   DD  DSN=USERID.UADS.SOURCE,DISP=(,CATLG),          *
*    //*             SPACE=(CYL,(20,2),RLSE),UNIT=3380,              *
*    //*             DCB=(RECFM=FB,LRECL=80,BLKSIZE=3120)            *
*    //ACCOUNT   DD  SYSOUT=*,DCB=(RECFM=F,BLKSIZE=80)               *
*                                                                    *  00067*36
***  WHERE THE 'ACCOUNT' DDNAME IS THE OUTPUT DESTINATION,           *  00067*36
***            'PDS' DDNAME IS THE INPUT SOURCE UADS DATASET         *  00067*36
*                                                                    *  00067*36
*                                                                    *  00067*36
*  CHANGE HISTORY -                                                  *  00068**1
*                                                                    *  00069**1
*     WRITTEN 03/86 BY BILL SOMERVILLE, MCI.                         *  00070**1
*     CHANGED 10/86 BY BILL SOMERVILLE - SUPPORT DIFFERENT BLOCKSIZES*  00071*37
*        FOR THE VARIOUS TYPES OF SYS1.UADS.                         *  00072*37
*                                                                    *  00073*37
**********************************************************************  00074**1
         EJECT                                                          00075**1
         USING SAVEAREA,R13                                             00076**1
         USING UADSDUMP,R12                                             00077**1
         USING IHADCB,R11                                               00078**1
         USING ENTLIST,R10                                              00079**1
         USING DIRENT,R9                                                00080**1
         USING DHED,R8                                                  00081**9
UADSDUMP CSECT                                                          00082**1
         SAVE (14,12),,'UADSDUMP&SYSDATE.&SYSTIME'     SAVE REGISTERS   00083**1
         LR    R12,R15             ESTABLISH BASE REGISTER              00084**1
         GETMAIN R,LV=WORKSIZE     OBTAIN A WORK AREA                   00085**1
         ST    R1,SAVENEW          FORWARD CHAIN                        00086**1
         ST    R13,SAVEOLD-SAVEAREA(,R1)     BACKWARD CHAIN             00087**1
         LR    R13,R1              SAVE THE WORK AREA POINTER           00088**1
**********************************************************************  00089**8
*  INITIALIZE THE WORK AREA AND OPEN THE MESSAGE DATASET.            *  00090**8
**********************************************************************  00091**8
         XC    ENTLISTH(4),ENTLISTH     CLEAR ENTRY LIST HEAD           00092**2
         XC    ENTNUM(4),ENTNUM    CLEAR NUMBER OF ENTRIES              00093**8
         XC    RETCODE(4),RETCODE  CLEAR THE RETURN CODE                00094**8
         XC    BUFSIZE(4),BUFSIZE  CLEAR THE BUFFER SIZE                00095*37
         MVC   DIRECTRY(DIRSKELN),DIRSKEL    COPY SKELETON DCB          00096**2
         MVC   PDS(PDSSKELN),PDSSKEL    COPY SKELETON DCB               00097**2
         LA    R11,PDS             GET THE PDS DCB ADDRESS              00098*37
         LA    R1,UADSJFCB         GET THE JFCB ADDRESS                 00099*37
         ST    R1,PDSEXLST         SAVE THE JFCB ADDRESS                00100*37
         MVI   PDSEXLST,X'87'      INDICATE JFCB ADDRESS + END OF LIST  00101*37
         LA    R1,PDSEXLST         GET THE EXIT LIST ADDRESS            00102*37
         STCM  R1,B'0111',DCBEXLSA SAVE THE EXIT LIST ADDRESS           00103*38
         MVC   ACCOUNT(ACCSKELN),ACCSKEL     COPY SKELETON DCB          00104**3
         MVC   SYSPRINT(SYSSKELN),SYSSKEL    COPY SKELETON DCB          00105**6
         MVC   OPENPARM(OPENSKLN),OPENSKEL   COPY SKELETON OPEN         00106**6
         MVC   CLOSPARM(CLOSSKLN),CLOSSKEL   COPY SKELETON CLOSE        00107**6
         MVI   USERLNTH,1          INITIALIZE THE USERID LENGTH         00108*23
         MVC   USERID(8),=CL8' '   CLEAR THE USERID                     00109*23
         OPEN  (SYSPRINT,OUTPUT),MF=(E,OPENPARM)  OPEN SYSPRINT         00110**8
         LA    R11,SYSPRINT        GET THE DCB ADDRESS                  00111**8
         TM    DCBOFLGS,DCBOFOPN   DID SYSPRINT OPEN?                   00112**8
         BO    OPENDIR             YES, START PROCESSING                00113**8
         ABEND X'B40'              NO, ABEND                            00114**8
         EJECT                                                          00115**1
**********************************************************************  00116**8
*  READ THE DIRECTORY OF THE PDS AND BUILD AN IN-STORAGE MEMBER LIST.*  00117**8
**********************************************************************  00118**8
OPENDIR  OPEN  (DIRECTRY,INPUT),MF=(E,OPENPARM)   OPEN THE DIRECTORY    00119**8
         LA    R2,=CL8'DIRECTRY'   GET TEXT ADDRESS TO INSERT INTO MSG  00120**8
         LA    R11,DIRECTRY        GET THE DCB ADDRESS                  00121**3
         TM    DCBOFLGS,DCBOFOPN   DID THE DIRECTORY OPEN?              00122**3
         BNO   OPENERR             NO, ISSUE ERROR MESSAGE AND EXIT     00123**8
         LA    R1,1                ISSUE OPEN SUCCESSFUL MESSAGE        00124**8
         BAL   R6,MESSAGE                                               00125**8
         XR    R10,R10             CLEAR THE ENTRY LIST POINTER         00126**3
READDIR  GET   DIRECTRY,DIRBLOCK   READ A DIRECTORY RECORD              00127*37
         LH    R2,DIRBLOCK         GET THE RECORD LENGTH                00128*37
         LA    R9,DIRBLOCK+2       POINT TO THE FIRST ENTRY             00129*37
         AR    R2,R9               POINT TO THE END OF THE BLOCK        00130**3
         S     R2,=F'2'                                                 00131**3
DEBLOCK  CR    R2,R9               ARE WE PAST THE END OF THE BLOCK?    00132**3
         BNH   READDIR             YES, GO READ A NEW RECORD            00133**3
         CLC   DIRNAME(8),=8X'FF'  IS THIS THE LAST MEMBER?             00134**3
         BE    DIREOF              YES, SIGNAL EOF                      00135**3
         L     R1,ENTNUM           GET THE NUMBER OF ENTRIES            00136**8
         LA    R1,1(,R1)           INCREMENT THE ENTRY COUNT            00137**8
         ST    R1,ENTNUM           SAVE THE NEW ENTRY COUNT             00138**8
         GETMAIN R,LV=ENTLSIZE     OBTAIN STORAGE FOR A LIST ENTRY      00139**3
         C     R10,=F'0'           IS THERE AN ENTRY IN THE LIST?       00140**3
         BNE   CHAINENT            YES, CHAIN THE NEW ENTRY             00141**3
         ST    R1,ENTLISTH         MAKE THE NEW ENTRY THE FIRST         00142**3
         B     MAKECURR            MAKE THE NEW ENTRY THE CURRENT       00143**3
CHAINENT ST    R1,ENTNEXT          CHAIN THE NEW ENTRY INTO THE LIST    00144**3
MAKECURR LR    R10,R1              MAKE THE NEW ENTRY CURRENT           00145**3
         MVC   ENTNAME(8),DIRNAME  MOVE THE ENTRY NAME                  00146**3
         MVC   ENTTTR(3),DIRTTR    MOVE THE ENTRY TTR                   00147**3
         XC    ENTTTR+3(1),ENTTTR+3     CLEAR THE LAST BYTE             00148**3
         XC    ENTNEXT(4),ENTNEXT  CLEAR THE NEXT ENTRY POINTER         00149**3
         IC    R1,DIRFLAGS         GET THE DIRECTORY ENTRY FLAGS        00150**3
         N     R1,=X'0000001F'     CLEAR FLAGS                          00151**3
         SLL   R1,1                MULTIPLY BY TWO TO GET LENGTH        00152**3
         A     R1,=F'12'           ADD LENGTH OF NAME AND TTRN          00153**3
         AR    R9,R1               POINT TO THE NEXT ENTRY              00154**3
         B     DEBLOCK             GO GET THE NEXT DIRECTORY ENTRY      00155**4
DIREOF   CLOSE (DIRECTRY),MF=(E,CLOSPARM)    CLOSE THE DIRECTORY        00156**4
         L     R1,ENTNUM           GET THE NUMBER OF ENTRIES            00157**9
         CVD   R1,CVDWORK          CONVERT ENTRIES TO DECIMAL           00158**9
         UNPK  CVEWORK(8),CVDWORK+4(4)  CONVERT ENTRIES TO EBCDIC       00159*12
         OI    CVEWORK+7,X'F0'     MASK OUT SIGN                        00160*12
         LA    R1,3                ISSUE NUMBER OF MEMBERS MESSAGE      00161**9
         LA    R2,CVEWORK          INSERT NUMBER OF ENTRIES             00162*12
         BAL   R6,MESSAGE                                               00163**9
         B     OPENPDS             OPEN THE PDS FOR PROCESSING          00164**8
OPENERR  LA    R1,2                ISSUE OPEN FAILURE MESSAGE           00165**8
         BAL   R6,MESSAGE                                               00166**8
         MVC   RETCODE(4),=F'16'   SET THE RETURN CODE                  00167**8
         B     EXIT                EXIT                                 00168**8
JFCBERR  CVD   R15,CVDWORK         CONVERT RETURN CODE TO DECIMAL       00169*37
         UNPK  CVEWORK(8),CVDWORK+4(4)  CONVERT RETURN CODE TO EBCDIC   00170*37
         OI    CVEWORK+7,X'F0'     MASK OUT SIGN                        00171*37
         LA    R2,CVEWORK          POINT TO THE EBCDIC RETURN CODE      00172*37
         LA    R1,6                ISSUE JFCB READ FAILED MESSAGE       00173*37
         BAL   R6,MESSAGE                                               00174*37
         MVC   RETCODE(4),=F'16'   SET THE RETURN CODE                  00175*37
         B     EXIT                EXIT                                 00176*37
         EJECT                                                          00177**3
**********************************************************************  00178**9
*  OPEN THE PDS FOR INPUT PROCESSING AND THE ACCOUNT FILE FOR OUTPUT *  00179**9
*  PROCESSING (FOR ACCOUNT CONTROL CARDS).                           *  00180**9
**********************************************************************  00181**9
OPENPDS  OPEN  (PDS,INPUT),MF=(E,OPENPARM)   OPEN THE PDS               00182**8
         LA    R2,=CL8'PDS'        GET TEXT ADDRESS TO INSERT INTO MSG  00183**8
         LA    R11,PDS             GET THE PDS DCB ADDRESS              00184**8
         TM    DCBOFLGS,DCBOFOPN   DID THE PDS OPEN?                    00185**8
         BNO   OPENERR             NO, ISSUE OPEN FAILURE MESSAGE       00186**8
         LA    R1,1                ISSUE OPEN SUCCESSFUL MESSAGE        00187**8
         BAL   R6,MESSAGE                                               00188**8
         RDJFCB (PDS),MF=(E,OPENPARM)   READ THE PDS JFCB               00189*37
         LTR   R15,R15             DID THE JFCB READ GO AS PLANNED?     00190*37
         BNZ   JFCBERR             NO, ISSUE JFCB READ FAILURE MESSAGE  00191*37
         LA    R1,UADSJFCB         GET THE JFCB ADDRESS                 00192*37
         USING JFCB,R1                                                  00193*37
         LH    R0,JFCBLKSI         GET THE UADS BLOCK SIZE              00194*37
         ST    R0,BUFSIZE          SAVE THE BUFFER SIZE                 00195*37
         DROP  R1                                                       00196*37
         GETMAIN R,LV=(0)          OBTAIN A BUFFER                      00197*37
         LR    R8,R1               SAVE THE BUFFER ADDRESS              00198*37
         OPEN  (ACCOUNT,OUTPUT),MF=(E,OPENPARM)   OPEN THE ACCOUNT FILE 00199**8
         LA    R2,=CL8'ACCOUNT'    GET TEXT ADDRESS TO INSERT INTO MSG  00200**8
         LA    R11,ACCOUNT         GET THE ACCOUNT DCB ADDRESS          00201**8
         TM    DCBOFLGS,DCBOFOPN   DID THE ACCOUNT FILE OPEN?           00202**8
         BNO   OPENERR             NO, ISSUE OPEN FAILURE MESSAGE       00203**8
         LA    R1,1                ISSUE OPEN SUCCESSFUL MESSAGE        00204**8
         BAL   R6,MESSAGE                                               00205**8
         L     R10,ENTLISTH        GET THE ENTRY LIST HEAD POINTER      00206**9
         EJECT                                                          00207**8
**********************************************************************  00208**9
*  FOR EACH ENTRY IN THE MEMBER LIST, READ THE UADS RECORD AND WRITE *  00209**9
*  CONTROL CARDS TO BE USED AS INPUT TO ACCOUNT.                     *  00210**9
**********************************************************************  00211**9
READUADS C     R10,=F'0'           IS THERE AN ENTRY TO BE PROCESSED?   00212**9
         BE    READDONE            NO, CLOSE FILES AND EXIT             00213**9
         FIND  PDS,ENTTTR,C        LOCATE THE MEMBER                    00214**9
         READ  READDECB,SF,PDS,DHED,'S',MF=(E,READPARM)     READ UADS   00215*37
         CHECK READDECB            CHECK STATUS OF READ OPERATION       00216**9
         OI    DUMPFLGS,DUMPFUSR   INDICATE NEW USER BEING PROCESSED    00217*13
         LA    R1,7                GET THE USERID LENGTH                00218*21
         LA    R2,UADSUSER+7       POINT TO THE LAST CHARACTER          00219*21
USERLOOP CLI   0(R2),C' '          IS THIS THE LAST CHARACTER?          00220*14
         BNE   TESTUSER            YES, COPY THE USERID FROM UADS       00221*21
         BCTR  R2,R0               DECREMENT THE ADDRESS                00222*21
         BCT   R1,USERLOOP         CHECK THE NEXT CHARACTER             00223*14
TESTUSER STC   R1,USERLNTH         SAVE THE USERID LENGTH               00224*21
         BCTR  R1,R0               DECREMENT LENGTH FOR MOVE/COMPARE    00225*21
         EX    R1,USERCOMP         IS THIS A NEW USERID?                00226*21
         BNE   MOVEUSER            YES, MOVE NEW USERID OVER            00227*21
         LA    R1,5                ISSUE WARNING FOR EXTENSION BLOCK    00228*21
         LA    R2,USERID           INSERT USERID INTO MESSAGE           00229*21
         BAL   R6,MESSAGE                                               00230*21
         MVC   RETCODE(4),=F'4'    SET THE RETURN CODE                  00231*23
         B     NEXTUSER            GO READ THE NEXT USER ENTRY          00232*21
MOVEUSER MVC   USERID(8),=CL8' '   CLEAR THE USERID                     00233*21
         EX    R1,USERMOVE         MOVE OVER THE USERID                 00234*21
         MVC   PASSWORD(8),=CL8'*' INITIALIZE PASSWORD FIELD            00235*21
         MVI   ACNTLNTH,1          INITIALIZE ACCOUNT FIELD LENGTH      00236*13
         MVC   ACNTDATA(1),=CL1'*' INITIALIZE ACCOUNT FIELD             00237*13
         L     R7,UADSPWD1         GET THE PASSWORD OFFSET BLOCK OFFSET 00238*13
NEXTPSWD AR    R7,R8               ADD THE BUFFER ADDRESS               00239*18
         TM    DUMPFLGS,DUMPFUSR   FIRST PASS FOR THIS USER?            00240*24
         BNO   GETDPOBD            NO, CONTINUE                         00241*24
         ST    R7,LASTDPOB         SAVE THE DPOB POINTER                00242*24
         USING DPOB,R7                                                  00243*13
GETDPOBD ICM   R5,B'1111',UADSPDAT IS THERE A PASSWORD DATA BLOCK?      00244*24
         BZ    ACCTLOOP            NO, BYPASS PASSWORD PROCESSING       00245*13
         AR    R5,R8               ADD THE BUFFER ADDRESS               00246*18
         USING DPOBD,R5                                                 00247*13
         MVC   PASSWORD(8),UADSPPWD     MOVE OVER THE PASSWORD          00248*13
         DROP  R5                                                       00249*13
ACCTLOOP L     R5,UADSPSUB         GET THE ACCOUNT OFFSET BLOCK         00250*24
NEXTACNT AR    R5,R8               ADD THE BUFFER ADDRESS               00251*13
         TM    DUMPFLGS,DUMPFUSR   FIRST PASS FOR THIS USER?            00252*24
         BNO   GETDNOBD            NO, CONTINUE                         00253*24
         ST    R5,LASTDNOB         SAVE THE DNOB POINTER                00254*27
         USING DNOB,R5                                                  00255*13
GETDNOBD ICM   R4,B'1111',UADSADAT IS THERE AN ACCOUNT DATA BLOCK?      00256*25
         BZ    PROCLOOP            NO, BYPASS ACCOUNT PROCESSING        00257*13
         AR    R4,R8               ADD THE BUFFER ADDRESS               00258*13
         USING DNOBD,R4                                                 00259*13
         XR    R1,R1               CLEAR R1                             00260*13
         IC    R1,UADSALEN         GET THE ACCOUNT NUMBER LENGTH        00261*13
         STC   R1,ACNTLNTH         SAVE THE ACCOUNT NUMBER LENGTH       00262*13
         BCTR  R1,R0               DECREMENT ACCOUNT NUMBER FOR MOVE    00263*13
         LA    R2,ACNTDATA         GET THE DESTINATION ADDRESS          00264*13
         LA    R3,UADSANUM         GET THE SOURCE ADDRESS               00265*13
         EX    R1,VARMOVE          MOVE THE ACCOUNT NUMBER              00266*21
         DROP  R4                                                       00267*13
PROCLOOP ICM   R4,B'1111',UADSASUB IS THERE A PROCEDURE OFFSET BLOCK?   00268*13
         BZ    PROCERR             NO, THINGS MUST BE MESSED UP         00269*13
NEXTPROC AR    R4,R8               ADD THE BUFFER ADDRESS               00270*13
         USING DROB,R4                                                  00271*13
         ICM   R3,B'1111',UADSRDAT IS THERE A PROCEDURE DATA BLOCK?     00272*13
         BZ    PROCERR             NO, THINGS MUST BE MESSED UP         00273*13
         AR    R3,R8               ADD THE BUFFER ADDRESS               00274*17
         USING DROBD,R3                                                 00275*13
         MVC   PROCNAME(8),UADSRNAM     MOVE OVER THE PROCEDURE NAME    00276*13
         MVC   PROCUNIT(8),UADSUNAM     MOVE OVER THE ESOTERIC UNITNAME 00277*13
         MVC   PROCSIZE(4),UADSRSIZ     GET THE PROCEDURE SIZE          00278*14
         DROP  R3                                                       00279*13
         BAL   R6,GENERATE         GENERATE THE CONTROL CARD(S)         00280*13
         NI    DUMPFLGS,X'FF'-DUMPFUSR  INDICATE FIRST CARD GENERATED   00281*13
         TM    UADSRFLG,FLGR01     ARE THERE ANY MORE PROCEDURES?       00282*13
         BO    TESTACNT            NO, GET THE NEXT ACCOUNT NUMBER      00283*19
         ICM   R4,B'0111',UADSRNEX GET THE NEXT OFFSET BLOCK            00284*13
         B     NEXTPROC            PROCESS THE NEXT OFFSET BLOCK        00285*13
         DROP  R4                                                       00286*13
PROCERR  LA    R1,4                ISSUE PROCEDURE NOT FOUND MESSAGE    00287*15
         LA    R2,USERID           INSERT THE USERID INTO THE MESSAGE   00288*15
         BAL   R6,MESSAGE                                               00289*15
         MVC   RETCODE(4),=F'8'    SET RETURN CODE                      00290*15
         B     NEXTUSER            CONTINUE WITH THE NEXT USER ENTRY    00291*15
TESTACNT TM    UADSAFLG,AFLG01     ARE THERE ANY MORE ACCOUNT NUMBERS?  00292*13
         BO    TESTPSWD            NO, GET THE NEXT PASSWORD            00293*19
         ICM   R5,B'0111',UADSANEX GET THE NEXT OFFSET BLOCK            00294*13
         B     NEXTACNT            PROCESS THE NEXT OFFSET BLOCK        00295*13
         DROP  R5                                                       00296*13
TESTPSWD TM    UADSPFLG,PFLG01     ARE THERE ANY MORE PASSWORDS?        00297*13
         BO    NEXTUSER            NO, READ THE NEXT USER ENTRY         00298*19
         ICM   R7,B'0111',UADSPNEX GET THE NEXT OFFSET BLOCK            00299*13
         B     NEXTPSWD            PROCESS THE NEXT OFFSET BLOCK        00300*13
         DROP  R7                                                       00301*13
NEXTUSER L     R10,ENTNEXT         POINT TO THE NEXT USER ENTRY         00302*13
         B     READUADS            READ THE NEXT USER ENTRY FROM UADS   00303*13
READDONE CLOSE (PDS),MF=(E,CLOSPARM)    CLOSE THE UADS                  00304*13
         CLOSE (ACCOUNT),MF=(E,CLOSPARM)     CLOSE THE ACCOUNT FILE     00305*13
         EJECT                                                          00306**9
EXIT     ICM   R0,B'1111',BUFSIZE  SHOULD THE BUFFER BE FREED?          00307*37
         BZ    EXITDONE            NO, CONTINUE                         00308*37
         FREEMAIN R,LV=(0),A=(R8)  FREE THE BUFFER                      00309*37
EXITDONE LR    R1,R13              GET THE SAVE AREA POINTER            00310*37
         L     R2,SAVEOLD          GET CALLER'S SAVE AREA               00311**8
         MVC   SAVER15-SAVEAREA(4,R2),RETCODE     SET THE RETURN CODE   00312**8
         FREEMAIN R,LV=WORKSIZE,A=(R1)  FREE THE WORK AREA              00313**5
         LR    R13,R2              MAKE THE CALLER'S SAVE AREA CURRENT  00314**8
         XC    SAVENEW(4),SAVENEW  CLEAR FORWARD CHAIN                  00315**1
         RETURN (14,12)            RESTORE REGISTERS AND RETURN         00316**1
         EJECT                                                          00317**9
**********************************************************************  00318**9
*  SUBROUTINE NAME -                                                 *  00319**9
*                                                                    *  00320**9
*     MESSAGE                                                        *  00321**9
*                                                                    *  00322**9
*  FUNCTION -                                                        *  00323**9
*                                                                    *  00324**9
*     THIS SUBROUTINE TAKES A MESSAGE NUMBER PASSED IN THROUGH R1 AND*  00325**9
*     AN OPTIONAL TEXT ADDRESS PASSED IN THROUGH R2 AND WRITES A     *  00326**9
*     MESSAGE TO THE SYSPRINT DATASET (WITH OPTIONAL TEXT INSERTION).*  00327**9
**********************************************************************  00328**9
MESSAGE  SLL   R1,2                MULTIPLY NUMBER BY 4 TO GET INDEX    00329**9
         L     R3,=A(MSGTEXT)      GET THE MESSAGE TEXT CSECT ADDRESS   00330**9
         L     R3,0(R3,R1)         GET THE MESSAGE TEXT ADDRESS         00331**9
         XR    R1,R1               CLEAR R1                             00332**9
         IC    R1,0(,R3)           GET THE MESSAGE LENGTH               00333*10
         BCTR  R1,R0               DECREMENT LENGTH FOR MOVE            00334**9
         MVI   MSGBUF,C' '         CLEAR THE MESSAGE BUFFER             00335*10
         MVC   MSGBUF+1(L'MSGBUF-1),MSGBUF                              00336*10
         EX    R1,MSGMOVE          MOVE THE MESSAGE TEXT                00337**9
         LTR   R2,R2               IS THERE ANYTHING TO INSERT?         00338**9
         BZ    MSGWRITE            NO, GO AHEAD AND WRITE THE MESSAGE   00339**9
         LA    R1,MSGBUF+1(R1)     POINT TO THE END OF THE MESSAGE      00340*10
         MVC   0(8,R1),0(R2)       INSERT THE TEXT                      00341**9
MSGWRITE PUT   SYSPRINT,MSGBUF     WRITE THE MESSAGE                    00342**9
         BR    R6                  RETURN                               00343*10
         EJECT                                                          00344**1
**********************************************************************  00345*14
*  SUBROUTINE NAME -                                                 *  00346*14
*                                                                    *  00347*14
*     GENERATE                                                       *  00348*14
*                                                                    *  00349*14
*  FUNCTION -                                                        *  00350*14
*                                                                    *  00351*14
*     THIS SUBROUTINE GENERATES THE ACCOUNT CONTROL CARDS FROM THE   *  00352*14
*     INFORMATION PROVIDED IN THE WORK AREA AND THE UADS HEADER.     *  00353*14
**********************************************************************  00354*14
GENERATE MVI   ACNTCARD,C' '       CLEAR THE ACCOUNT CARD               00355*14
         MVC   ACNTCARD+1(L'ACNTCARD-1),ACNTCARD                        00356*14
         NI    DUMPFLGS,X'FF'-(DUMPCONT+DUMPDATA) CLEAR FLAGS           00357*24
         LA    R2,ACNTCARD         GET THE ACCOUNT CARD ADDRESS         00358*14
         MVC   0(5,R2),=C'ADD ('   MOVE IN INITIAL STRING               00359*14
         LA    R2,5(,R2)           INCREMENT PAST STRING                00360*14
         XR    R1,R1               CLEAR R1                             00361*21
         IC    R1,USERLNTH         GET THE USERID LENGTH                00362*21
         BCTR  R1,R0               DECREMENT LENGTH FOR MOVE            00363*21
         LA    R3,USERID           GET THE USERID ADDRESS               00364*21
         EX    R1,VARMOVE          MOVE IN THE USERID                   00365*21
         LA    R2,1(R2,R1)         INCREMENT PAST USERID                00366*24
         C     R7,LASTDPOB         IS THIS A NEW PASSWORD?              00367*24
         BE    GENPSWD             NO, CONTINUE                         00368*26
         OI    DUMPFLGS,DUMPDATA   INDICATE DATA INSERTED               00369*24
         ST    R7,LASTDPOB         SAVE THE NEW DPOB                    00370*24
         MVC   0(8,R2),=C') DATA ('     MOVE IN DATA STRING             00371*24
         LA    R2,7(,R2)           INCREMENT PAST DATA STRING           00372*24
GENPSWD  MVC   1(8,R2),PASSWORD    MOVE IN THE PASSWORD                 00373*24
         LA    R2,9(,R2)           INCREMENT PAST PASSWORD              00374*24
         C     R5,LASTDNOB         IS THIS A NEW ACCOUNT?               00375*24
         BE    GENACNT             NO, CONTINUE                         00376*26
         ST    R5,LASTDNOB         SAVE THE NEW DNOB                    00377*24
         TM    DUMPFLGS,DUMPDATA   DATA ALREADY INSERTED?               00378*24
         BO    GENACNT             YES, CONTINUE                        00379*24
         OI    DUMPFLGS,DUMPDATA   INDICATE DATA INSERTED               00380*24
         MVC   0(8,R2),=C') DATA ('     MOVE IN DATA STRING             00381*24
         LA    R2,7(,R2)           INCREMENT PAST DATA STRING           00382*24
GENACNT  XR    R1,R1               CLEAR R1                             00383*24
         IC    R1,ACNTLNTH         GET THE ACCOUNT LENGTH               00384*14
         BCTR  R1,R0               DECREMENT LENGTH FOR MOVE            00385*17
         LA    R2,1(,R2)           INCREMENT TO NEXT CHARACTER          00386*24
         LA    R3,ACNTDATA         GET THE ACCOUNT ADDRESS              00387*14
         EX    R1,VARMOVE          MOVE IN THE ACCOUNT                  00388*21
         LA    R2,1(R2,R1)         INCREMENT PAST ACCOUNT               00389*18
         TM    DUMPFLGS,DUMPFUSR+DUMPDATA    FIRST CARD OR DATA DONE?   00390*24
         BNZ   GENPROC             YES, COPY PROCEDURE NAME             00391*24
         MVC   0(8,R2),=C') DATA ('     MOVE IN DATA STRING             00392*14
         LA    R2,7(,R2)           INCREMENT PAST DATA STRING           00393*20
GENPROC  MVC   1(8,R2),PROCNAME    MOVE IN THE PROCEDURE                00394*18
         MVI   9(R2),C')'          CLOSE THE PARENTHESIS                00395*18
         LA    R2,11(,R2)          INCREMENT PAST THE COMMAND           00396*18
         TM    DUMPFLGS,DUMPFUSR   IS THIS THE FIRST CARD FOR A USER?   00397*28
         BO    GENCONT             YES, CONTINUE ANYWAY                 00398*28
         CLC   PROCSIZE(4),=F'0'   IS THERE A SIZE PARAMETER?           00399*14
         BNE   GENCONT             YES, GO OUTPUT CARD AND CONTINUE     00400*14
         CLI   PROCUNIT,C' '       IS THERE A UNIT PARAMETER?           00401*14
         BE    FIRSTOUT            NO, GO OUTPUT CARD                   00402*14
GENCONT  MVI   0(R2),C'+'          INDICATE CONTINUATION                00403*14
         OI    DUMPFLGS,DUMPCONT                                        00404*28
FIRSTOUT PUT   ACCOUNT,ACNTCARD    OUTPUT THE CARD                      00405*14
         TM    DUMPFLGS,DUMPCONT   WAS THERE A CONTINUATION?            00406*28
         BNOR  R6                  NO, RETURN                           00407*28
         MVI   ACNTCARD,C' '       CLEAR THE ACCOUNT CARD               00408*14
         MVC   ACNTCARD+1(L'ACNTCARD-1),ACNTCARD                        00409*14
         LA    R2,ACNTCARD         GET THE ACCOUNT CARD ADDRESS         00410*17
         ICM   R1,B'1111',PROCSIZE IS THERE A SIZE PARAMETER?           00411*14
         BZ    TESTUNIT            NO, CHECK FOR A UNIT PARAMETER       00412*14
         CVD   R1,CVDWORK          CONVERT THE SIZE TO DECIMAL          00413*14
         UNPK  CVEWORK(8),CVDWORK+4(4)  CONVERT THE SIZE TO EBCDIC      00414*14
         OI    CVEWORK+7,X'F0'     MASK OUT SIGN                        00415*14
         MVC   0(6,R2),=C'SIZE ('  INSERT SIZE STRING                   00416*14
         LA    R2,6(,R2)           INCREMENT PAST STRING                00417*14
         MVC   0(7,R2),CVEWORK+1   MOVE IN SIZE VALUE                   00418*23
         MVI   7(R2),C')'          CLOSE SIZE PARAMETER                 00419*23
         LA    R2,9(,R2)           INCREMENT PAST SIZE PARAMETER        00420*23
TESTUNIT CLI   PROCUNIT,C' '       IS THERE A UNIT PARAMETER?           00421*14
         BE    FIRSTTST            NO, CHECK TO SEE IF WE'RE DONE       00422*14
         MVC   0(6,R2),=C'UNIT ('  INSERT UNIT STRING                   00423*14
         LA    R2,6(,R2)           INCREMENT PAST STRING                00424*14
         MVC   0(8,R2),PROCUNIT    MOVE IN UNIT VALUE                   00425*14
         MVI   8(R2),C')'          CLOSE UNIT PARAMETER                 00426*14
         LA    R2,10(,R2)          INCREMENT PAST UNIT PARAMETER        00427*14
FIRSTTST TM    DUMPFLGS,DUMPFUSR   IS THIS THE FIRST CARD FOR A USER?   00428*14
         BNO   GENLAST             NO, GENERATE THE LAST CARD           00429*28
         TM    UADSATTR,USATR00    DOES USER HAVE OPER AUTHORITY?       00430*28
         BNO   CHEKACCT            NO, CHECK FOR ACCT AUTHORITY         00431*28
         MVC   0(4,R2),=C'OPER'    INDICATE OPER AUTHORITY              00432*28
         LA    R2,5(,R2)           INCREMENT PAST STRING                00433*28
CHEKACCT TM    UADSATTR,USATR01    DOES USER HAVE ACCT AUTHORITY?       00434*28
         BNO   CHEKJCL             NO, CHECK FOR JCL AUTHORITY          00435*28
         MVC   0(4,R2),=C'ACCT'    INDICATE ACCT AUTHORITY              00436*28
         LA    R2,5(,R2)           INCREMENT PAST STRING                00437*28
CHEKJCL  TM    UADSATTR,USATR02    DOES USER HAVE JCL AUTHORITY?        00438*28
         BNO   CHEKMNT             NO, CHECK FOR MOUNT AUTHORITY        00439*28
         MVC   0(3,R2),=C'JCL'     INDICATE JCL AUTHORITY               00440*28
         LA    R2,4(,R2)           INCREMENT PAST STRING                00441*28
CHEKMNT  TM    UADSATTR,USATR03    DOES USER HAVE MOUNT AUTHORITY?      00442*28
         BNO   CHEKRCVR            NO, CHECK FOR RECOVER AUTHORITY      00443*28
         MVC   0(5,R2),=C'MOUNT'   INDICATE MOUNT AUTHORITY             00444*28
         LA    R2,6(,R2)           INCREMENT PAST STRING                00445*28
CHEKRCVR TM    UADSATTR,USATR04    DOES USER HAVE RECOVER AUTHORITY?    00446*28
         BNO   USERDATA            YES, PROCESS USERDATA                00447*28
         MVC   0(8,R2),=C'NORECOVER'    INDICATE NO RECOVER AUTHORITY   00448*28
         LA    R2,9(,R2)           INCREMENT PAST STRING                00449*28
USERDATA ICM   R1,B'0011',UADSINST GET THE USERDATA HALFWORD            00450*28
         MVC   0(9,R2),=C'USERDATA('    INSERT USERDATA STRING          00451*28
         LA    R2,9(,R2)           INCREMENT PAST STRING                00452*28
         BAL   R3,CVTBH            INSERT HEX USERDATA INTO COMMAND     00453*28
         MVI   4(R2),C')'          CLOSE THE USERDATA STRING            00454*28
         MVI   6(R2),C'+'          INDICATE CONTINUATION                00455*28
         PUT   ACCOUNT,ACNTCARD    OUTPUT THE CONTINUATION CARD         00456*32
         MVI   ACNTCARD,C' '       CLEAR THE ACCOUNT CARD               00457*32
         MVC   ACNTCARD+1(L'ACNTCARD-1),ACNTCARD                        00458*32
         LA    R2,ACNTCARD         GET THE ACCOUNT CARD ADDRESS         00459*32
**********************************************************************  00460*32
*  PROCESS THE PERFORMANCE GROUP MASK.  THIS MASK IS A 32 BYTE BIT-  *  00461*32
*  MASK OF PERFORMANCE GROUPS (1-256).                               *  00462*32
**********************************************************************  00463*32
         ICM   R3,B'1111',UADSPERP IS THERE A PERFORM OFFSET?           00464*32
         BZ    CHEKDEST            NO, GO CHECK DESTINATION             00465*32
         MVC   0(8,R2),=C'PERFORM('     INSERT PERFORM STRING           00466*34
         LA    R2,8(,R2)           INCREMENT PAST STRING                00467*34
         AR    R3,R8               ADD THE BUFFER ADDRESS               00468*32
         LA    R14,32              NUMBER OF BYTES IN PERFORM MASK      00469*32
NEXTBYTE CLI   0(R3),X'00'         QUICK CHECK, ANYTHING TO PROCESS?    00470*32
         BZ    NEXTRNGE            NO, GO INCREMENT TO THE NEXT BYTE    00471*35
         LA    R15,8               NUMBER OF BITS PER BYTE              00472*32
         LA    R1,X'80'            INITIAL MASK FOR THIS BYTE           00473*32
         LA    R0,32               COMPUTE PERFORMANCE RANGE            00474*32
         SR    R0,R14              PR = (8 * (32 - BYTE)) + 8           00475*32
         SLL   R0,3                                                     00476*32
         AR    R0,R15                                                   00477*32
         ST    R0,PERFRNGE         SAVE THE PERFORMANCE RANGE           00478*32
BYTELOOP EX    R1,PERFTEST         CHECK THIS PERFORMANCE GROUP         00479*32
         BNO   NEXTMASK            NO PERFORMANCE GROUP FOR THIS MASK   00480*32
         L     R0,PERFRNGE         GET THE PERFORMANCE RANGE            00481*32
         SR    R0,R15              SUBTRACT BIT OFFSET TO GET GROUP     00482*32
         A     R0,=F'1'            INCREMENT FOR ZERO ORIGIN            00483*32
         MVC   0(4,R2),=X'40202120'     INSERT EDIT MASK INTO BUFFER    00484*32
         CVD   R0,CVDWORK          CONVERT PERFORMANCE GROUP TO DECIMAL 00485*32
         ED    0(4,R2),CVDWORK+6   CONVERT PERFORMANCE GROUP TO EBCDIC  00486*32
         LA    R2,4(,R2)           INCREMENT PAST PERFORMANCE GROUP     00487*32
         LA    R0,ACNTCARD+L'ACNTCARD-4 SHOULD WE WRITE A CARD YET?     00488*32
         SR    R0,R2                                                    00489*32
         BP    NEXTMASK            NO, GO PROCESS THE NEXT GROUP        00490*32
         MVI   1(R2),C'+'          INDICATE CONTINUATION                00491*32
         PUT   ACCOUNT,ACNTCARD    OUTPUT THE CONTINUATION CARD         00492*32
         MVI   ACNTCARD,C' '       CLEAR THE ACCOUNT CARD               00493*32
         MVC   ACNTCARD+1(L'ACNTCARD-1),ACNTCARD                        00494*32
         LA    R2,ACNTCARD         GET THE ACCOUNT CARD ADDRESS         00495*32
NEXTMASK SRL   R1,1                SHIFT MASK RIGHT TO GET NEXT MASK    00496*32
         BCT   R15,BYTELOOP        CHECK THE NEW PERFORMANCE GROUP      00497*32
NEXTRNGE LA    R3,1(,R3)           INCREMENT TO NEXT BYTE               00498*35
         BCT   R14,NEXTBYTE        GO PROCESS THE NEXT RANGE            00499*32
         MVI   0(R2),C')'          CLOSE PARENTHESES                    00500*34
         MVI   2(R2),C'+'          INDICATE CONTINUATION                00501*32
         PUT   ACCOUNT,ACNTCARD    OUTPUT THE CONTINUATION CARD         00502*32
         MVI   ACNTCARD,C' '       CLEAR THE ACCOUNT CARD               00503*32
         MVC   ACNTCARD+1(L'ACNTCARD-1),ACNTCARD                        00504*32
         LA    R2,ACNTCARD         GET THE ACCOUNT CARD ADDRESS         00505*32
CHEKDEST CLI   UADSDEST,X'00'      IS THERE A DESTINATION?              00506*34
         BE    CHEKSUBH            NO, CHECK FOR HOLD CLASS             00507*34
         MVC   0(5,R2),=C'DEST('   INSERT DEST STRING                   00508*34
         LA    R2,5(,R2)           INCREMENT PAST STRING                00509*34
         MVC   0(8,R2),UADSDEST    MOVE OVER THE DESTINATION            00510*34
         MVI   8(R2),C')'          CLOSE PARENTHESES                    00511*34
         LA    R2,10(,R2)          INCREMENT PAST DESTINATION           00512*34
CHEKSUBH CLI   UADSSUBH,X'00'      IS THERE A HOLD CLASS?               00513*34
         BE    CHEKSUBC            NO, CHECK FOR JOB CLASS              00514*34
         MVC   0(5,R2),=C'HOLD('   INSERT HOLD STRING                   00515*34
         LA    R2,5(,R2)           INCREMENT PAST STRING                00516*34
         MVC   0(1,R2),UADSSUBH    MOVE OVER THE HOLD CLASS             00517*34
         MVI   1(R2),C')'          CLOSE PARENTHESES                    00518*34
         LA    R2,3(,R2)           INCREMENT PAST HOLD CLASS            00519*34
CHEKSUBC CLI   UADSSUBC,X'00'      IS THERE A JOB CLASS?                00520*34
         BE    CHEKSUBM            NO, CHECK FOR MESSAGE CLASS          00521*35
         MVC   0(9,R2),=C'JOBCLASS('    INSERT JOBCLASS STRING          00522*34
         LA    R2,9(,R2)           INCREMENT PAST STRING                00523*34
         MVC   0(1,R2),UADSSUBC    MOVE OVER THE JOB CLASS              00524*34
         MVI   1(R2),C')'          CLOSE PARENTHESES                    00525*34
         LA    R2,3(,R2)           INCREMENT PAST JOB CLASS             00526*34
CHEKSUBM CLI   UADSSUBM,X'00'      IS THERE A MESSAGE CLASS?            00527*34
         BE    CHEKSOUT            NO, CHECK FOR SYSOUT CLASS           00528*34
         MVC   0(5,R2),=C'MSGCLASS('    INSERT MSGCLASS STRING          00529*34
         LA    R2,9(,R2)           INCREMENT PAST STRING                00530*34
         MVC   0(1,R2),UADSSUBM    MOVE OVER THE MESSAGE CLASS          00531*34
         MVI   1(R2),C')'          CLOSE PARENTHESES                    00532*34
         LA    R2,3(,R2)           INCREMENT PAST MESSAGE CLASS         00533*34
CHEKSOUT CLI   UADSSOUT,X'00'      IS THERE A SYSOUT CLASS?             00534*35
         BE    CHEKMAXC            NO, CHECK FOR MAX SIZE               00535*34
         MVC   0(7,R2),=C'SYSOUT(' INSERT SYSOUT STRING                 00536*34
         LA    R2,7(,R2)           INCREMENT PAST STRING                00537*34
         MVC   0(1,R2),UADSSOUT    MOVE OVER THE SYSOUT CLASS           00538*34
         MVI   1(R2),C')'          CLOSE PARENTHESES                    00539*34
         LA    R2,3(,R2)           INCREMENT PAST SYSOUT CLASS          00540*34
CHEKMAXC ICM   R1,B'1111',UADSMAXC IS THERE A MAXIMUM SIZE?             00541*34
         BZ    MAXCNOLM            NO, INSERT NOLIM STRING              00542*34
         MVC   0(8,R2),=C'MAXSIZE('     INSERT MAXSIZE STRING           00543*34
         LA    R2,8(,R2)           INCREMENT PAST STRING                00544*34
         CVD   R1,CVDWORK          CONVERT MAXSIZE TO DECIMAL           00545*34
         UNPK  CVEWORK(8),CVDWORK+4(4)  CONVERT MAXSIZE TO EBCDIC       00546*34
         OI    CVEWORK+7,X'F0'     MASK OUT SIGN                        00547*34
         MVC   0(7,R2),CVEWORK+1   MOVE OVER MAXSIZE                    00548*34
         MVI   7(R2),C')'          CLOSE PARENTHESES                    00549*34
         LA    R2,9(,R2)           INCREMENT PAST MAXSIZE               00550*34
         B     GENLAST             OUTPUT LAST CARD                     00551*34
MAXCNOLM MVC   0(5,R2),=C'NOLIM'   INSERT NOLIM STRING                  00552*34
         LA    R2,7(,R2)           INCREMENT PAST NOLIM                 00553*34
GENLAST  PUT   ACCOUNT,ACNTCARD    OUTPUT THE CONTINUATION CARD         00554*32
         BR    R6                  RETURN                               00555*14
         EJECT                                                          00556*14
*********************************************************************** 00557*28
*  SUBROUTINE NAME -                                                  * 00558*28
*                                                                     * 00559*28
*     CVTBH                                                           * 00560*28
*                                                                     * 00561*28
*  FUNCTION -                                                         * 00562*28
*                                                                     * 00563*28
*     CONVERT THE DATA IN THE RIGHTMOST 4 NIBBLES OF R1 TO EBCDIC HEX * 00564*28
*     AND INSERT INTO THE BUFFER POINTED TO BY R2.                    * 00565*28
*********************************************************************** 00566*28
CVTBH    LA    R14,3               GET NUMBER OF DIGITS TO CONVERT - 1  00567*30
CVTLOOP  LA    R15,X'0F'           LOAD MASK INTO R15                   00568*28
         NR    R15,R1              MASK OUT ALL BUT LOW DIGIT           00569*29
         IC    R15,EBCDHEX(R15)    GET THE EBCDIC DIGIT                 00570*28
         STC   R15,0(R14,R2)       PUT EBCDIC DIGIT INTO BUFFER         00571*28
         SRL   R1,4                SHIFT NEXT DIGIT DOWN                00572*28
         S     R14,=F'1'           DECREMENT INDEX                      00573*31
         BNM   CVTLOOP             BRANCH BACK FOR NEXT DIGIT           00574*30
         BR    R3                  RETURN                               00575*28
         EJECT                                                          00576*28
MSGMOVE  MVC   MSGBUF(*-*),1(R3)   EXECUTED MESSAGE MOVE                00577*21
VARMOVE  MVC   0(*-*,R2),0(R3)     EXECUTED STRING MOVE                 00578*21
USERCOMP CLC   USERID(*-*),UADSUSER     EXECUTED USERID COMPARE         00579*21
USERMOVE MVC   USERID(*-*),UADSUSER     EXECUTED USERID MOVE            00580*21
PERFTEST TM    0(R3),X'00'         EXECUTED PERFORMANCE GROUP TEST      00581*33
         PRINT ON,NOGEN                                                 00582**5
DIRSKEL  DCB   DSORG=PS,MACRF=GM,DDNAME=PDS,RECFM=U,BLKSIZE=256,       X00583**3
               EODAD=DIREOF                                             00584**3
DIRSKELN EQU   *-DIRSKEL                                                00585**2
PDSSKEL  DCB   DSORG=PO,MACRF=R,DDNAME=PDS,RECFM=U,EXLST=0              00586*37
PDSSKELN EQU   *-PDSSKEL                                                00587**2
ACCSKEL  DCB   DSORG=PS,MACRF=PM,DDNAME=ACCOUNT,RECFM=FB,BLKSIZE=3120, X00588**3
               LRECL=80                                                 00589**3
ACCSKELN EQU   *-ACCSKEL                                                00590**3
SYSSKEL  DCB   DSORG=PS,MACRF=PM,DDNAME=SYSPRINT,RECFM=FB,LRECL=80      00591**3
SYSSKELN EQU   *-SYSSKEL                                                00592**7
OPENSKEL OPEN  (,),MF=L                                                 00593**6
OPENSKLN EQU   *-OPENSKEL                                               00594**6
CLOSSKEL CLOSE (),MF=L                                                  00595**6
CLOSSKLN EQU   *-CLOSSKEL                                               00596**6
         PRINT ON,GEN                                                   00597**5
EBCDHEX  DC    C'0123456789ABCDEF'                                      00598*30
         EJECT                                                          00599**2
         LTORG                                                          00600**1
         EJECT                                                          00601**1
MSGTEXT  CSECT                                                          00602**8
MSGVECT  DS    F                   MESSAGE ADDRESS VECTOR               00603**8
         DC    A(MSG001)           OPEN SUCCESSFUL FOR FILE: XXXXXXXX   00604*15
         DC    A(MSG002)           OPEN FAILURE FOR FILE: XXXXXXXX      00605*15
         DC    A(MSG003)           NUMBER OF ENTRIES READ: XXXXXXXX     00606*15
         DC    A(MSG004)           PROCEDURE NOT FOUND FOR USER: XXXX   00607*15
         DC    A(MSG005)           UADS EXTENSION BLOCK SKIPPED FOR ... 00608*21
         DC    A(MSG006)           JFCB READ FAILED, RC = XXXXXXXX      00609*37
MSG001   DC    AL1(MSG002-MSG001-1)                                     00610**8
         DC    C'OPEN SUCCESSFUL FOR FILE: '                            00611**9
MSG002   DC    AL1(MSG003-MSG002-1)                                     00612**8
         DC    C'OPEN FAILURE FOR FILE: '                               00613**9
MSG003   DC    AL1(MSG004-MSG003-1)                                     00614**8
         DC    C'NUMBER OF ENTRIES READ: '                              00615**9
MSG004   DC    AL1(MSG005-MSG004-1)                                     00616*15
         DC    C'PROCEDURE NOT FOUND FOR USER: '                        00617*15
MSG005   DC    AL1(MSG006-MSG005-1)                                     00618*21
         DC    C'UADS EXTENSION BLOCK SKIPPED FOR USER: '               00619*21
MSG006   DC    AL1(MSGTEXTE-MSG006-1)                                   00620*21
         DC    C'JFCB READ FAILED, RC = '                               00621*37
MSGTEXTE EQU   *                                                        00622*11
         EJECT                                                          00623**8
         REGS                                                           00624**1
         EJECT                                                          00625**1
WORKAREA DSECT                     REENTRANT WORK AREA                  00626**1
         SAVEAREA DSECT=NO                                              00627**1
CVDWORK  DS    D                   BINARY TO DECIMAL WORK AREA          00628**9
ENTNUM   DS    F                   NUMBER OF ENTRIES IN THE DIRECTORY   00629**8
RETCODE  DS    F                   RETURN CODE                          00630**8
PROCSIZE DS    F                   PROCEDURE SIZE FIELD                 00631*14
BUFSIZE  DS    F                   UADS BUFFER SIZE FIELD               00632*37
PERFRNGE DS    F                   PERFORMANCE GROUP RANGE              00633*32
ENTLISTH DS    A                   DIRECTORY LIST HEAD                  00634**2
LASTDPOB DS    A                   LAST DPOB ADDRESS                    00635*24
LASTDNOB DS    A                   LAST DNOB ADDRESS                    00636*24
DIRECTRY DS    0F,CL(DIRSKELN)     PDS DIRECTORY DCB                    00637**2
PDS      DS    0F,CL(PDSSKELN)     PDS DATA DCB                         00638**2
ACCOUNT  DS    0F,CL(ACCSKELN)     ACCOUNT CARD FILE DCB                00639**3
SYSPRINT DS    0F,CL(SYSSKELN)     SYSPRINT DCB                         00640**3
OPENPARM DS    0F,CL(OPENSKLN)     OPEN PARAMETER LIST                  00641**7
READPARM READ  READDECB,SF,MF=L    READ PARAMETER LIST                  00642**3
CLOSPARM DS    0F,CL(CLOSSKLN)     CLOSE PARAMETER LIST                 00643**7
UADSJFCB DS    0F,CL(JFCBSIZE)     JFCB FOR SYS1.UADS                   00644*37
PDSEXLST DS    F                   EXIT LIST FOR PDS DCB                00645*37
DIRBLOCK DS    CL256               DIRECTORY BLOCK BUFFER               00646*37
ACNTCARD DS    CL80                ACCOUNT CARD BUFFER                  00647**3
MSGBUF   DS    CL80                MESSAGE BUFFER                       00648*12
CVEWORK  DS    CL8                 DECIMAL TO EBCDIC WORK AREA          00649*12
USERLNTH DS    AL1                 USERID LENGTH                        00650*22
USERID   DS    CL8                 USERID FIELD                         00651*13
PASSWORD DS    CL8                 PASSWORD FIELD                       00652*13
PROCNAME DS    CL8                 PROCEDURE NAME FIELD                 00653*13
PROCUNIT DS    CL8                 PROCEDURE UNIT NAME FIELD            00654*13
ACNTLNTH DS    AL1                 ACCOUNT NUMBER FIELD LENGTH          00655*13
ACNTDATA DS    CL40                ACCOUNT NUMBER FIELD                 00656*13
DUMPFLGS DS    XL1                 FLAGS                                00657*15
DUMPFUSR EQU   X'80'               FIRST CALL TO GENERATE FOR THIS USER 00658*15
DUMPCONT EQU   X'40'               CONTINUATION CARD HAS BEEN USED      00659*15
DUMPDATA EQU   X'20'               DATA CARD HAS BEEN INSERTED          00660*24
WORKSIZE EQU   *-WORKAREA          WORK AREA LENGTH IN BYTES            00661**1
         EJECT                                                          00662**1
ENTLIST  DSECT                     DIRECTORY LIST ENTRY                 00663**2
ENTNAME  DS    CL8                 ENTRY NAME                           00664**2
ENTTTR   DS    XL4                 ENTRY TTR                            00665**3
ENTNEXT  DS    A                   NEXT DIRECTORY LIST ENTRY            00666**2
ENTLSIZE EQU   *-ENTLIST           DIRECTORY LIST ENTRY SIZE IN BYTES   00667**2
         EJECT                                                          00668**2
DIRENT   DSECT                     DIRECTORY BLOCK ENTRY                00669**2
DIRNAME  DS    CL8                 ENTRY NAME                           00670**2
DIRTTR   DS    XL3                 ENTRY TTR                            00671**3
DIRFLAGS DS    XL1                 ENTRY FLAGS                          00672**3
         EJECT                                                          00673**2
         DCBD  DSORG=PS,DEVD=DA                                         00674**4
         EJECT                                                          00675**4
         IKJEFUAD DSPL,ALL                                              00676**4
         EJECT                                                          00677**4
JFCB     DSECT                                                          00678*37
         IEFJFCBN LIST=YES                                              00679*37
JFCBSIZE EQU   *-JFCB                                                   00680*37
         EJECT                                                          00681*37
         END   UADSDUMP                                                 00682**2
