 /*  LISTRP -  L I S T  R A C F  P R O T E C T I O N                  */  LISTRP
 /*********************************************************************/  LISTRP
 /*                                                                   */  LISTRP
 /* PROGRAM NAME: LISTRP   (LIST RACF PROTECTION)                     */  LISTRP
 /*               UTILITY PROGRAM TO COMPARE OUTPUT FROM A LISTCAT AND*/  LISTRP
 /*               THE OUTPUT FROM A RACF SEARCH COMMAND TO DETERMINE  */  LISTRP
 /*               WHICH RACF PROFILES PROTECT WHICH CATALOGED DATASETS*/  LISTRP
 /*               (NONVSAM, CLUSTERS, AND DATA & INDEX COMPONENTS).   */  LISTRP
 /*               THIS PROGRAM CONVERTED (ALMOST) LINE FOR LINE FROM  */  LISTRP
 /*               THE CLIST LISTRP IN 'SYS1.SAMPLIB(RACINSTL)'.       */  LISTRP
 /*                                                                   */  LISTRP
 /* AUTHOR:       STUART SABEL, BLUE CROSS OF WASHINGTON & ALASKA 4/85*/  LISTRP
 /*                                                                   */  LISTRP
 /* INPUT DATA:   DDNAME - RACFIN, DATASET - &SYSUID.EXEC.RACF.CLIST  */  LISTRP
 /*               THIS DATASET CONTAINS THE OUTPUT FROM THE COMMAND   */  LISTRP
 /*                  SEARCH MASK(&PREFIX) CLIST NOLIST                */  LISTRP
 /*                                                                   */  LISTRP
 /*               DDNAME - LISTCAT, DCB=(LRECL=125,RECFM=VBA)         */  LISTRP
 /*               THIS DATASET CONTAINS THE OUTPUT FROM THE FOLLOWING */  LISTRP
 /*               LISTCAT COMMAND:                                    */  LISTRP
 /*                  LISTCAT LEVEL(&PREFIX) OFILE(LISTCAT)            */  LISTRP
 /*                                                                   */  LISTRP
 /*                                                                   */  LISTRP
 /* OUTPUT DATA:  THE OUTPUT FROM THIS PROGRAM IS A REPORT OF WHICH   */  LISTRP
 /*               RACF PROFILES PROTECT WHICH CATALOGED DATASETS.     */  LISTRP
 /*               DDNAME - SYSPRINT                                   */  LISTRP
 /*                                                                   */  LISTRP
 /*                                                                   */  LISTRP
 /* NOTES:        ARRAYS FOR RACF RECORDS AND LISTCAT RECORDS ARE     */  LISTRP
 /*               SET UP FOR A MAXIMUM OF 1000 RECORDS EACH.          */  LISTRP
 /*                                                                   */  LISTRP
 /*               THIS PROGRAM MAY BE EXECUTED FROM EITHER A CLIST,   */  LISTRP
 /*               OR IN A BATCH JOB. THE PROGRAM EXECUTES QUICKLY;    */  LISTRP
 /*               THE PROBLEM WITH EXECUTING IT FROM A CLIST IS THAT  */  LISTRP
 /*               THE SEARCH COMMAND, OR LISTC COMMAND TO GET THE     */  LISTRP
 /*               NECESSARY DATA MAY TAKE A LONG TIME...              */  LISTRP
 /*                                                                   */  LISTRP
 /*********************************************************************/  LISTRP
 LISTRP: PROC OPTIONS(MAIN);                   /* MAIN PROCEDURE START*/  LISTRP
 DCL RACFIN   FILE;                            /* SEARCH CMD OUTPUT.  */  LISTRP
 DCL LISTCAT  FILE;                            /* LISTCAT OUTPUT.     */  LISTRP
 DCL SYSPRINT FILE;                            /* SYSOUT MESSAGES.    */  LISTRP
 DCL INDEX    BUILTIN;                         /* INDEX FUNCTION.     */  LISTRP
 DCL LENGTH   BUILTIN;                         /* LENGTH FUNCTION.    */  LISTRP
 DCL STRING   BUILTIN;                         /* STRING FUNCTION.    */  LISTRP
 DCL SUBSTR   BUILTIN;                         /* SUBSTRING FUNCTION. */  LISTRP
 DCL RCOUNT1  FIXED       BIN(15)     INIT(0); /* RACFIN READ COUNT.  */  LISTRP
 DCL RCOUNT2  FIXED       BIN(15)     INIT(0); /* LISTCAT READ COUNT. */  LISTRP
 DCL LEN      FIXED       BIN(31)     INIT(0); /* STRING LENGTH VAR.  */  LISTRP
 DCL RACIN    CHAR(255)   VARYING     INIT((255) ' '); /* RACF REC.   */  LISTRP
 DCL CATIN    CHAR(125)   VARYING     INIT((125) ' '); /* LISTC REC.  */  LISTRP
 DCL STRPOS   FIXED       BIN(31)     INIT(0); /* CHAR. POSITION VAR. */  LISTRP
 DCL RTOT     FIXED       BIN(31)     INIT(1); /* TOT # OF RACF DSNS  */  LISTRP
 DCL CTOT     FIXED       BIN(31)     INIT(1); /* TOT # OF LISTC DSNS */  LISTRP
 DCL RACREC(1000) CHAR(53) VARYING    INIT((1000) (53) ' '); /* ARRAY */  LISTRP
 DCL CATREC(1000) CHAR(61) VARYING    INIT((1000) (61) ' '); /* ARRAY */  LISTRP
 DCL PREFIX   CHAR(08)    VARYING     INIT((8)' '); /* GRAB HLQ.      */  LISTRP
 DCL PROFILE  CHAR(44)    VARYING     INIT((44)' '); /* MATCH PROFILE.*/  LISTRP
 DCL DATASET  CHAR(44)    VARYING     INIT((44)' '); /* MATCH DSNAME. */  LISTRP
 DCL DSN_COL  FIXED       BIN(31)     INIT(0); /* COLUMN POINTER.     */  LISTRP
 DCL PROF_COL FIXED       BIN(31)     INIT(0); /* COLUMN POINTER.     */  LISTRP
 DCL PSEUDO   CHAR(44)    VARYING     INIT((44)' '); /* PSEUDO DSNAME */  LISTRP
 DCL RUNNER   FIXED       BIN(31)     INIT(0); /* ARRAY COUNTER. RACF */  LISTRP
 DCL RUNNER2  FIXED       BIN(31)     INIT(0); /* ARRAY COUNTER. CATLG*/  LISTRP
 DCL COUNT    FIXED       BIN(31)     INIT(0); /* COLUMN COUNTER.     */  LISTRP
 DCL COUNT2   FIXED       BIN(31)     INIT(0); /* COLUMN COUNTER.     */  LISTRP
 DCL MATCHDS  CHAR(03)    VARYING     INIT((03)' '); /* MATCH FLAG.   */  LISTRP
 DCL PROF_LEN FIXED       BIN(31)     INIT(0); /* PROFILE LENGTH CNTR.*/  LISTRP
 DCL DSN_LEN  FIXED       BIN(31)     INIT(0); /* DSNAME LENGTH CNTR. */  LISTRP
 DCL START    FIXED       BIN(31)     INIT(0); /* COL. SCAN START COL.*/  LISTRP
 DCL DCR      FIXED       BIN(31)     INIT(0); /* DSN COLUMN POINTER. */  LISTRP
 DCL PLEN     FIXED       BIN(31)     INIT(0); /* PSEUDO NAME LENGTH. */  LISTRP
 DCL FTIME    CHAR(03)    VARYING     INIT((03)' '); /* PROCESS FLAG. */  LISTRP
 DCL DATS     CHAR(44)    VARYING     INIT((44)' '); /* DS SCAN VAR.  */  LISTRP
 /*********************************************************************/  LISTRP
 /* SET UP VARIABLES WITH CURRENT DATE AND TIME.                      */  LISTRP
 /*********************************************************************/  LISTRP
 DCL DATE     BUILTIN;                                                    LISTRP
 DCL TIME     BUILTIN;                                                    LISTRP
 DCL SL            CHAR(01)   INIT('/');                                  LISTRP
 DCL CO            CHAR(01)   INIT(':');                                  LISTRP
 DCL CURRDATE      CHAR(08)   INIT((08)' ');                              LISTRP
 DCL CURRTIME      CHAR(08)   INIT((08)' ');                              LISTRP
 DCL 1 DATEIN,                                                            LISTRP
       5 YEAR      CHAR(02)   INIT('  '),                                 LISTRP
       5 MONTH     CHAR(02)   INIT('  '),                                 LISTRP
       5 DAY       CHAR(02)   INIT('  ');                                 LISTRP
 DCL 1 TIMEIN,                                                            LISTRP
       5 HOURS     CHAR(02)   INIT('  '),                                 LISTRP
       5 MINUTES   CHAR(02)   INIT('  '),                                 LISTRP
       5 SECONDS   CHAR(02)   INIT('  '),                                 LISTRP
       5 MILLIES   CHAR(03)   INIT('  ');                                 LISTRP
 STRING(DATEIN) = DATE;                        /* PULL IN CURR DATE. */   LISTRP
 STRING(TIMEIN) = TIME;                        /* PULL IN CURR TIME. */   LISTRP
 CURRDATE = MONTH || SL || DAY || SL || YEAR ;       /* SET UP DATE. */   LISTRP
 CURRTIME = HOURS || CO || MINUTES || CO || SECONDS ;/* SET UP TIME. */   LISTRP
 /*********************************************************************/  LISTRP
 /* WHAT TO DO WITH END OF FILE CONDITIONS...                         */  LISTRP
 /*********************************************************************/  LISTRP
 ON ENDFILE(RACFIN) GOTO READ2;                /* AT EOF, READ NEXT.  */  LISTRP
 ON ENDFILE(LISTCAT) GOTO GETPREF;             /* AT EOF, PROCESS EM. */  LISTRP
                                                                          LISTRP
 /*********************************************************************/  LISTRP
 /* SET UP REPORT HEADINGS.                                           */  LISTRP
 /*********************************************************************/  LISTRP
 PUT SKIP EDIT ('BLUE CROSS OF WA/AK   -   LIST RACF PROTECTIO',          LISTRP
                'N UTILITY ') (A,A);           /* SET UP HEADINGS     */  LISTRP
 PUT SKIP EDIT (CURRDATE,'                                      ',        LISTRP
                CURRTIME) (A,A,A);             /* WRITE DATE AND TIME */  LISTRP
 PUT SKIP EDIT                                 /* WRITE TOTAL LINE.   */  LISTRP
       ('------------------------------------------------------')         LISTRP
            (A);                               /*                     */  LISTRP
 PUT SKIP EDIT (' ') (A);                      /* WRITE BLANK LINE.   */  LISTRP
                                               /*                     */  LISTRP
 /*********************************************************************/  LISTRP
 /* READ RACF SEARCH COMMAND DATA INTO THE RACIN ARRAY.               */  LISTRP
 /*********************************************************************/  LISTRP
 READ1: READ FILE(RACFIN) INTO(RACIN);         /* READ 'RACFIN'.      */  LISTRP
    RCOUNT1 = RCOUNT1 + 1;                     /* COUNT THE READ.     */  LISTRP
    LEN = LENGTH(RACIN);                       /* FIND LENGTH.        */  LISTRP
    RACREC(RTOT) = SUBSTR(RACIN,10,LEN-10);    /* GRAB DSN, NO QUOTES */  LISTRP
    RTOT = RTOT + 1;                           /* INCREMENT COUNTER.  */  LISTRP
    GOTO READ1;                                /* READ THE NEXT ONE.  */  LISTRP
 /*********************************************************************/  LISTRP
 /* READ LISTCAT COMMAND DATA INTO THE CATIN ARRAY.                   */  LISTRP
 /*********************************************************************/  LISTRP
 READ2: READ FILE(LISTCAT) INTO(CATIN);        /* READ 'LISTCAT'      */  LISTRP
    IF SUBSTR(CATIN,02,07) = 'NONVSAM'         /* TAKE AS VALID -     */  LISTRP
         THEN GOTO GOTIT;                      /* NONVSAM DATASETS    */  LISTRP
    IF SUBSTR(CATIN,02,07) = 'CLUSTER'         /* TAKE AS VALID -     */  LISTRP
         THEN GOTO GOTIT;                      /* VSAM CLUSTERS.      */  LISTRP
    IF SUBSTR(CATIN,02,05) = 'INDEX'           /* TAKE AS VALID -     */  LISTRP
         THEN GOTO GOTIT;                      /* VSAM INDEX COMPONENT*/  LISTRP
    IF SUBSTR(CATIN,02,04) = 'DATA'            /* TAKE AS VALID -     */  LISTRP
         THEN GOTO GOTIT;                      /* VSAM DATA COMPONENTS*/  LISTRP
    GOTO READ2;                                /* IF NOT, READ AGAIN. */  LISTRP
    GOTIT:                                                                LISTRP
    LEN = LENGTH(CATIN);                       /* FIND LENGTH.        */  LISTRP
    CATREC(CTOT) = SUBSTR(CATIN,18,LEN-17);    /* GRAB DSNAME ONLY.   */  LISTRP
    RCOUNT2 = RCOUNT2 + 1;                     /* COUNT THE READ.     */  LISTRP
    CTOT = CTOT + 1;                           /* INCREMENT COUNTER.  */  LISTRP
    GOTO READ2;                                /* READ THE NEXT ONE.  */  LISTRP
                                                                          LISTRP
 /*********************************************************************/  LISTRP
 /* FIRST, GET THE PREFIX OF THE USER/GROUP TO BE PROCESSED.          */  LISTRP
 /*********************************************************************/  LISTRP
 GETPREF:                                                                 LISTRP
      STRPOS = INDEX(RACREC(1),'.');           /* LOOK FOR FIRST DOT. */  LISTRP
      PREFIX = SUBSTR(RACREC(1),01,STRPOS-1);  /* GRAB PREFIX.        */  LISTRP
 /*********************************************************************/  LISTRP
 /* CLIST DATA STARTS HERE.                                           */  LISTRP
 /*********************************************************************/  LISTRP
  COUNT = RTOT;                                /* SET COUNT TO RTOT.  */  LISTRP
 COUNT2 = CTOT;                                /* SET COUNT2 TO CTOT. */  LISTRP
 START = LENGTH(PREFIX) + 2;                   /* GET STARTING COLUMN.*/  LISTRP
 RUNNER = 1 ;                                  /* SET ARRAY COUNTER.  */  LISTRP
 DO WHILE (RUNNER <= COUNT);                   /* PROCESS ALL PROFILES*/  LISTRP
   MATCHDS = 'NO';                             /* MATCH INDICATOR = NO*/  LISTRP
   PROFILE = RACREC(RUNNER);                   /* SET UP PROFILE.     */  LISTRP
   PUT SKIP EDIT (' ') (A);                    /* WRITE A BLANK LINE. */  LISTRP
   PUT SKIP EDIT ('     PROFILE ===> ',PROFILE) (A,A);                    LISTRP
   PUT SKIP EDIT                                                          LISTRP
        ('  PROTECTS THE FOLLOWING CATALOGED DATA SET(S)') (A);           LISTRP
   PROF_LEN = LENGTH(PROFILE);                 /* GET PROFILE LENGTH. */  LISTRP
   RUNNER2 = 1;                                /* SET ARRAY COUNTER.  */  LISTRP
  DO WHILE (RUNNER2 <= COUNT2);                /* PROCESS ALL DATASETS*/  LISTRP
   DATASET = CATREC(RUNNER2);                  /* SET UP DSNAME.      */  LISTRP
   IF DATASET = '9' THEN GOTO BYPASSDS;        /* BYPASSED PROCESSED. */  LISTRP
   DSN_LEN = LENGTH(DATASET);                  /* SET SCAN LIMIT.     */  LISTRP
   DSN_COL = START;                            /* DSN COL SCAN VALUE. */  LISTRP
   PROF_COL = START;                           /* PROF COL SCAN VALUE.*/  LISTRP
   PSEUDO = PREFIX || '.' ;                    /* SET UP SCAN PROFILE.*/  LISTRP
   DO WHILE (PROF_COL <= PROF_LEN);            /* IF WHOLE PROF¬SCANND*/  LISTRP
 /*********************************************************************/  LISTRP
 /* IF A PERCENT '%' SIGN IS FOUND, PROCESS IT.                       */  LISTRP
 /*********************************************************************/  LISTRP
    IF SUBSTR(PROFILE,PROF_COL,1) = '%' THEN DO; /* IF PERCENT, THEN. */  LISTRP
      IF DSN_COL <= DSN_LEN THEN               /* GET NEXT CHARACTER. */  LISTRP
         PSEUDO = PSEUDO || SUBSTR(DATASET,DSN_COL,1);                    LISTRP
      PROF_COL = PROF_COL + 1;                 /* INCR. COL CNTR BY 1.*/  LISTRP
      DSN_COL = DSN_COL + 1;                   /* INCR. COL CNTR BY 1.*/  LISTRP
      GOTO ENDMAIN;                            /*                     */  LISTRP
     END;                                                                 LISTRP
 /*********************************************************************/  LISTRP
 /* IF AN ASTERISK IS FOUND, AND THE PROFILE IS THE SAME LENGTH AS    */  LISTRP
 /* THE DATASET NAME, THEN PROCESS IT HERE.                           */  LISTRP
 /*********************************************************************/  LISTRP
    IF SUBSTR(PROFILE,PROF_COL,1) = '*' &      /* LOOK FOR GENERIC    */  LISTRP
         PROF_COL = PROF_LEN THEN DO;          /* CHARS. IF SO THEN...*/  LISTRP
      IF DSN_COL <= DSN_LEN THEN               /* IF SO, GRAB INFO.   */  LISTRP
           PSEUDO = PSEUDO || SUBSTR(DATASET,DSN_COL,DSN_LEN-DSN_COL+1);  LISTRP
      DSN_COL = DSN_LEN;                       /* RESET DSN_COL.      */  LISTRP
      PROF_COL = PROF_COL + 1;                 /* ADD ONE TO PROF_COL.*/  LISTRP
      GOTO ENDMAIN;                            /*                     */  LISTRP
     END;                                                                 LISTRP
 /*********************************************************************/  LISTRP
 /* IF AN ASTERISK IS FOUND, AND THE PROFILE IS SHORTER IN LENGTH     */  LISTRP
 /* THAN THE DATASET NAME, PROCESS IT HERE.                           */  LISTRP
 /*********************************************************************/  LISTRP
    IF SUBSTR(PROFILE,PROF_COL,1) = '*' & PROF_COL < PROF_LEN  THEN DO;   LISTRP
      IF (DSN_COL <= DSN_LEN) THEN DO;         /*                     */  LISTRP
          DCR = DSN_COL;                       /* CURR DS RANGE TO DSN*/  LISTRP
          DO WHILE (SUBSTR(DATASET,DCR,1) ¬= '.' & DCR < DSN_LEN);        LISTRP
            DCR = DCR + 1;                                                LISTRP
          END;                                                            LISTRP
          PSEUDO = PSEUDO || SUBSTR(DATASET,DSN_COL,DCR-DSN_COL);         LISTRP
        END;                                                              LISTRP
      PROF_COL = PROF_COL + 1;                 /* INCR COLUMN COUNTER.*/  LISTRP
      DSN_COL = DCR;                           /* RESET DSN POINTER.  */  LISTRP
      GOTO ENDMAIN;                            /*                     */  LISTRP
     END;                                      /*                     */  LISTRP
    PSEUDO = PSEUDO || SUBSTR(PROFILE,PROF_COL,1);                        LISTRP
    PROF_COL = PROF_COL + 1;                   /* INCR COLUMN COUNTER.*/  LISTRP
    DSN_COL = DSN_COL + 1;                     /* INCR COLUMN COUNTER.*/  LISTRP
 /*********************************************************************/  LISTRP
 /* CHECK TO SEE IF THE PSEUDO NAME AND THE DATASET NAME MATCH. IF    */  LISTRP
 /* NOT, THEN TRY AGAIN.                                              */  LISTRP
 /*********************************************************************/  LISTRP
   ENDMAIN:                                                               LISTRP
    PLEN = LENGTH(PSEUDO);                     /* SAVE LEN. OF PSEUDO.*/  LISTRP
    IF PLEN > DSN_LEN THEN PLEN = DSN_LEN;     /* RESET PLEN IF >     */  LISTRP
    IF PSEUDO ¬= SUBSTR(DATASET,1,PLEN) THEN   /* IF NO MATCH, RESET  */  LISTRP
         PROF_COL = PROF_LEN + 1;              /* PROF_COL.           */  LISTRP
   END;                                                                   LISTRP
 /*********************************************************************/  LISTRP
 /* IF THE PSEUDO AND THE DATASET NAME MATCH, WRITE IT OUT HERE.      */  LISTRP
 /*********************************************************************/  LISTRP
   IF PSEUDO = DATASET THEN DO;                /* IF A MATCH, THEN....*/  LISTRP
        PUT SKIP EDIT                          /* WRITE OUT THE DATA- */  LISTRP
             ('DATASET ===> ',DATASET) (A,A);  /* SET NAME.           */  LISTRP
        CATREC(RUNNER2) = '9';                 /* MARK DSN AS MATCHED.*/  LISTRP
        MATCHDS = 'YES';                       /* MATCHED FLAG=YES.   */  LISTRP
    END;                                                                  LISTRP
 /*********************************************************************/  LISTRP
 /* THIS LABEL IS FOR BYPASSING INVALID DATASET NAME, AND ADVANCING   */  LISTRP
 /* THE ARRAY COUNTER FOR DATASETS.                                   */  LISTRP
 /*********************************************************************/  LISTRP
   BYPASSDS:                                                              LISTRP
    RUNNER2 = RUNNER2 + 1;                     /* ADVANCE TO NEXT DSN.*/  LISTRP
   END;                                                                   LISTRP
 /*********************************************************************/  LISTRP
 /* IF NO MATCHING DATASET NAMES ARE FOUND, WRITE OUT A MESSAGE HERE. */  LISTRP
 /*********************************************************************/  LISTRP
 IF MATCHDS = 'NO' THEN DO;                    /* IF NO MATCH TO PROF,*/  LISTRP
    PUT SKIP EDIT                              /* WRITE NONE FOUND.   */  LISTRP
         ('NO MATCHING DATA SET NAMES FOUND') (A);                        LISTRP
    PUT SKIP EDIT (' ') (A);                                              LISTRP
  END;                                                                    LISTRP
 /*********************************************************************/  LISTRP
 /* ADVANCE THE PROFILE ARRAY COUNTER BY ONE.                         */  LISTRP
 /*********************************************************************/  LISTRP
 NEXTPROF:                                                                LISTRP
  RUNNER = RUNNER + 1;                         /* GET NEXT PROFILE.   */  LISTRP
  IF SUBSTR(RACREC(RUNNER),1,1) = ' ' THEN     /* DO NOT PROCESS ANY  */  LISTRP
       GOTO NEXTPROF;                          /* BLANK PROFILE NAMES.*/  LISTRP
 END;                                                                     LISTRP
 /*********************************************************************/  LISTRP
 /* WHEN ALL DATASETS AND PROFILES HAVE BEEN MATCHED, SCAN THE        */  LISTRP
 /* DATASETS TO DETERMINE WHICH (IF ANY) ARE UNPROTECTED.             */  LISTRP
 /*********************************************************************/  LISTRP
   RUNNER = 1;                                 /* RESET COUNTER.      */  LISTRP
   FTIME = 'YES';                              /* FIRST TIME THROUGH. */  LISTRP
   DO WHILE (RUNNER <= COUNT2);                /* PROCESS ALL DSNS.   */  LISTRP
   DATS = CATREC(RUNNER);                      /* SET UP DSNAME.      */  LISTRP
   IF SUBSTR(DATS,1,1) = ' ' THEN GOTO REALEND;/* IF EOF, QUIT IT.    */  LISTRP
   IF DATS ¬= '9' THEN DO;                     /* IF NOT PROCESSED....*/  LISTRP
      IF FTIME = 'YES' THEN DO;                /* AND FIRST TIME THRU,*/  LISTRP
        PUT SKIP EDIT (' ') (A);               /* WRITE A BLANK..     */  LISTRP
        PUT SKIP EDIT (' ') (A);               /* WRITE A BLANK..     */  LISTRP
        PUT SKIP EDIT                          /* WRITE OUT UNPROTECT */  LISTRP
             ('THE FOLLOWING DATASET(S) ARE NOT RACF PROTECTED') (A);     LISTRP
        PUT SKIP EDIT (' ') (A);                                          LISTRP
       END;                                                               LISTRP
      PUT SKIP EDIT ('UNPROTECTED DATASET ===> ',DATS) (A,A);             LISTRP
      FTIME = 'NO';                            /* SET FTIME=NO        */  LISTRP
     END;                                                                 LISTRP
   RUNNER = RUNNER + 1;                        /* INCREMENT ARRAY CNTR*/  LISTRP
   END;                                                                   LISTRP
 /*********************************************************************/  LISTRP
 /* DISPLAY THE COUNTS HERE.                                          */  LISTRP
 /*********************************************************************/  LISTRP
 REALEND:                                                                 LISTRP
       PUT SKIP EDIT (' ') (A);                /* WRITE BLANK LINE.   */  LISTRP
       PUT SKIP EDIT                           /* WRITE TOTAL LINE.   */  LISTRP
       ('-------------------------------------------------------')        LISTRP
            (A);                               /*                     */  LISTRP
       PUT SKIP EDIT (' ') (A);                /* WRITE BLANK LINE.   */  LISTRP
       PUT SKIP EDIT (RCOUNT1,' RACF PROFILES.') (A,A);                   LISTRP
       PUT SKIP EDIT (RCOUNT2,' CATALOGED DATASETS.') (A,A);              LISTRP
 /*********************************************************************/  LISTRP
 /* CLOSE THE INPUT FILES AND GET OUT.                                */  LISTRP
 /*********************************************************************/  LISTRP
 ALLDONE:                                                                 LISTRP
    CLOSE FILE(RACFIN);                        /* CLOSE RACF FILE.    */  LISTRP
    CLOSE FILE(LISTCAT);                       /* CLOSE LISTCAT FILE. */  LISTRP
    RETURN(0);                                 /* TERMINATE BLOCK.    */  LISTRP
    END LISTRP;                                /* THAT'S ALL FOLKS!   */  LISTRP
